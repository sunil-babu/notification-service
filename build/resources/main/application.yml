spring:
  application:
    name: order-consumer-service
  profiles:
    active: local
server:
  port: 8081
topics:
    producer-topic: 'acme-order'
---
spring:
  config:
    activate:
      on-profile: local
  kafka:
    template:
      default-topic: order
    consumer:
      properties:
        spring.json.value.default.type: com.ee.notificationservice.payload.OrderEvent
        spring.json.use.type.headers: false
      bootstrap-servers: localhost:9092,localhost:9093,localhost:9094
      group-id: order-events-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      bootstrap-servers:
        -   localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: "all"
      retries: 3
      properties:
        spring.json.trusted.package: com.*
    streams:
      application-id: order-streamsv0.1
      properties: # properties not explicitly handled by KafkaProperties.streams
        default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default.value.serde: org.springframework.kafka.support.serializer.JsonSerde
        spring.json.trusted.packages: com.ee.notificationservice.payload.OrderEvent

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS
---


spring:
  config:
    activate:
      on-profile: test
  kafka:
    bootstrap-servers: ${spring.embedded.kafka.brokers}
    template:
      default-topic: order
    consumer:
      properties:
        spring.json.value.default.type: com.ee.notificationservice.payload.OrderEvent
        spring.json.use.type.headers: false
      group-id: order-events-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: "all"
      retries: 3
      properties:
        spring.json.trusted.package: com.*
    streams:
      application-id: order-streamsv0.1
      properties: # properties not explicitly handled by KafkaProperties.streams
        default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default.value.serde: org.springframework.kafka.support.serializer.JsonSerde
        spring.json.trusted.packages: com.ee.notificationservice.payload.OrderEvent

---

spring:
  config:
    activate:
      on-profile: prod
  kafka:
    consumer:
      bootstrap-servers: localhost:9092,localhost:9093,localhost:9094
      key-deserializer: org.apache.kafka.common.serialization.IntegerDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: order-events-group
